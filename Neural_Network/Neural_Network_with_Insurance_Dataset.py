# -*- coding: utf-8 -*-
"""insurance _Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tTcUG9sk89BP4NMWS_l6VEm24-cRjGNw
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt

# Read dat from dataset in Github
insurance_Dataset = pd.read_csv('https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv')

print(insurance_Dataset)

#due computer unknow charactor, so we change it to number,  such as yes = 1, no =0
insurance_one_hot = pd.get_dummies(insurance_Dataset)
print(insurance_one_hot.head)

# We seperate Charges out of dataset
# And we get Charges to output
x = insurance_one_hot.drop('charges', axis = 1)
y = insurance_one_hot['charges']

print(x.head())

print(y.head())

# This module will seperate Test set out of Dev test
from sklearn.model_selection import train_test_split

# we get test set = 20% of all data set
 # And we random hook value from data set 20 value
x_Train, x_Test, y_Train, y_Test = train_test_split(x, y, test_size = 0.2, random_state = 42)

# Vlaue of Test set and Train set seperated
print(x.shape, x_Train.shape, x_Test.shape)

# Set random value = 42
tf.random.set_seed(42)
# Create model
insurance_model = tf.keras.Sequential([tf.keras.layers.Dense(1), tf.keras.layers.Dense(1)]) # Dense is point in layers or hidden layers

#Compile model for get Loss use SGD Algorithm
insurance_model.compile(loss = 'mae', optimizer = tf.keras.optimizers.SGD(), metrics = ['mae'])

# Train model_1
model_1 = insurance_model.fit(x_Train, y_Train, epochs = 100) #model_1 = insurance_model.fit(input, output], epochs = จำนวนรอบ)

plt.plot(model_1.history['loss'])

# Add Dense for complexity of model and Accurate
insurance_model_new = tf.keras.Sequential([
    # Layer 1
    tf.keras.layers.Dense(100),
    #Layer 2
    tf.keras.layers.Dense(50),
    #Layer 3 is output, so Dense must = number of output parameter (1)
    tf.keras.layers.Dense(1)
    ])

# We don't want adjust parameters, we just change algorithm for training (Adam Algorithm)
insurance_model_new.compile(loss = 'mae', optimizer = 'Adam', metrics = 'mae')

model_2 = insurance_model_new .fit(x_Train, y_Train, epochs = 200)

plt.plot(model_2.history['loss'])

